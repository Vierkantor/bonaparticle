#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Tasks that perform actions on images
"""


import task
from os import listdir
from os.path import isdir, isfile, join
from subprocess import call
from .. import latex, files




class ImageTask(task.Task):
    """
    Abstract class that should not be used directly
    """

    OUTPUT_FOLDER = './Images'


    def list_all_images(self, path, master_file, list_of_files=[]):
        """
        Recursively list all files in a given directory
        """
        list_of_files += files.list_files_in_folder(path)

        [
            self.list_all_images(folder, master_file, list_of_files)
            for folder
            in files.list_folders_in_folder(path)
        ]

        return [
            path
            for path
            in list_of_files
            if self.is_image(path) and not self.is_output(path, master_file)
        ]


    def is_image(self, path):
        """
        Whether the path is a reference to an image file
        """
        return isfile(path) and \
               (
                    path[-(len('.pdf')):].lower() == '.pdf' or \
                    path[-(len('.png')):].lower() == '.png' or \
                    path[-(len('.jpg')):].lower() == '.jpg' or \
                    path[-(len('.jpeg')):].lower() == '.jpeg'
               )


    def is_output(self, path, master_file):
        """
        Whether it is likely that the file is a PDF generated by compiling a
        bonaparticle-based file
        """
        base_file_name = '.'.join(path.split('/')[-1].split('.')[:-1])

        return path[:len(self.OUTPUT_FOLDER)] == self.OUTPUT_FOLDER or \
               base_file_name + '.tex' == master_file or \
               path in [
                   file_name + '.pdf'
                   for file_name 
                   in latex.list_included_articles(master_file)
               ]




class NaiveCompressionTask(ImageTask):
    """
    Compress images without taking pixel resolution into account
    """


    def perform(self, master_file):
        """
        Compress images
        """
        images = self.list_all_images('.', master_file, [])

        for image in images:
            folder = self.OUTPUT_FOLDER + '/Screen/' + \
                     '/'.join(image.split('/')[1:-1])

            files.create_path(folder)

            try:
                call([
                    'convert',
                    image,
                    '-quality',
                    '50',
                    image.replace('./', self.OUTPUT_FOLDER + '/Screen/')
                ])
                self.owner.success("Successfully converted " + image)
            except:
                self.owner.error("Failed to convert " + image)





class PrintConversionTask(ImageTask):
    """
    Convert images to the CMYK color space using the lazy uninformed method
    """


    def perform(self, master_file):
        """
        Convert all images to the CMYK color space
        """
        images = self.list_all_images('.', master_file, [])

        for image in images:
            folder = self.OUTPUT_FOLDER + '/Print/' + \
                     '/'.join(image.split('/')[1:-1])

            files.create_path(folder)

            try:
                call([
                    'convert',
                    image,
                    '-colorspace',
                    'CMYK',
                    image.replace('./', self.OUTPUT_FOLDER + '/Print/')
                ])
                self.owner.success("Successfully converted " + image)
            except:
                self.owner.error("Could not successfully convert " + image)




class ResolutionCheckTask(ImageTask):
    """
    Check whether images are large enough
    """
